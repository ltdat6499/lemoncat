scalar Date
scalar Time
scalar DateTime
scalar Duration
scalar UtcOffset
scalar LocalDate
scalar LocalTime
scalar LocalEndTime
scalar EmailAddress
scalar NegativeFloat
scalar NegativeInt
scalar NonEmptyString
scalar NonNegativeFloat
scalar NonNegativeInt
scalar NonPositiveFloat
scalar NonPositiveInt
scalar PhoneNumber
scalar PositiveFloat
scalar PositiveInt
scalar PostalCode
scalar UnsignedFloat
scalar UnsignedInt
scalar URL
scalar ObjectID
scalar BigInt
scalar Long
scalar SafeInt
scalar UUID
scalar GUID
scalar HexColorCode
scalar HSL
scalar HSLA
scalar IPv4
scalar IPv6
scalar ISBN
scalar JWT
scalar Latitude
scalar Longitude
scalar MAC
scalar Port
scalar RGB
scalar RGBA
scalar USCurrency
scalar Currency
scalar JSON
scalar JSONObject
scalar Byte
scalar Void

type User {
  id: String
  email: String
  password: String
  name: String
  image: JSON
  token: String
  status: Boolean
  role: String
  elo: JSON
  otp: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserInput {
  email: String
  password: String
  name: String
  image: JSON
  token: String
}

type Comment {
  id: String
  parent: String
  parentType: String
  uid: String
  interact: String
  content: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CommentInput {
  parent: String
  parentType: String
  uid: String
  interact: String
  content: String
}

type Movie {
  id: String
  summary: String
  rating: String
  images: [JSON]
  genres: [String]
  onScreen: DateTime
  lemonScore: Int
  userScore: Int
  status: Boolean
  hot: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input MovieInput {
  summary: String
  rating: String
  images: [JSON]
  genres: [String]
  onScreen: DateTime
  status: Boolean
  hot: Boolean
}

type Query {
  users: [User]
  user(id: String): User
  comments: [Comment]
  comment(id: String): Comment
  movies: [Movie]
  movie(id: String): Movie
}

type Mutation {
  createUser(input: UserInput): User
  updateUser(id: String, input: UserInput): User
  deleteUser(id: String): Boolean
  createComment(input: CommentInput): Comment
  updateComment(id: String, input: CommentInput): Comment
  deleteComment(id: String): Boolean
  createMovie(input: MovieInput): Movie
  updateMovie(id: String, input: MovieInput): Movie
  deleteMovie(id: String): Boolean
}

schema {
  query: Query
  mutation: Mutation
}
