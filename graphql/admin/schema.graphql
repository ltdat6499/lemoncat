scalar Date
scalar Time
scalar DateTime
scalar Duration
scalar UtcOffset
scalar LocalDate
scalar LocalTime
scalar LocalEndTime
scalar EmailAddress
scalar NegativeFloat
scalar NegativeInt
scalar NonEmptyString
scalar NonNegativeFloat
scalar NonNegativeInt
scalar NonPositiveFloat
scalar NonPositiveInt
scalar PhoneNumber
scalar PositiveFloat
scalar PositiveInt
scalar PostalCode
scalar UnsignedFloat
scalar UnsignedInt
scalar URL
scalar ObjectID
scalar BigInt
scalar Long
scalar SafeInt
scalar UUID
scalar GUID
scalar HexColorCode
scalar HSL
scalar HSLA
scalar IPv4
scalar IPv6
scalar ISBN
scalar JWT
scalar Latitude
scalar Longitude
scalar MAC
scalar Port
scalar RGB
scalar RGBA
scalar USCurrency
scalar Currency
scalar JSON
scalar JSONObject
scalar Byte
scalar Void

input ReportInput {
  user: String
  targetType: String
  tartgetId: String
  target: String
  type: String
  content: String
  status: String
}

type Report {
  user: User
  targetType: String
  targetId: String
  type: String
  content: String
  status: String
}

type UserData {
  elo: String
  reports: [Report]
  working: String
  activeAt: Date
}

input UserDataInput {
  reports: [ReportInput]
}

type User {
  id: String
  email: String
  password: String
  name: String
  image: String
  status: Boolean
  role: String
  data: UserData
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserInput {
  email: String
  password: String
  name: String
  image: String
  status: Boolean
  role: String
  data: UserDataInput
}

type Comment {
  id: String
  parentType: String
  parent: JSON
  user: User
  interact: String
  content: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CommentInput {
  id: String
  parentType: String
  parent: String
  uid: String
  interact: String
  content: String
}

type FlimCrew {
  role: String
  person: Person
}

input FlimCrewInput {
  role: String
  person: String
}

type FlimInfo {
  name: String
  tags: [String]
  genres: [String]
  poster: String
  rating: String
  runtime: String
  summary: String
  trailer: String
  collection: String
  soundMixs: [String]
  productions: [String]
  aspectRatio: String
  theatersDate: String
  streamingDate: String
  originalLanguage: String
}

input FlimInfoInput {
  name: String
  tags: [String]
  genres: [String]
  poster: String
  rating: String
  runtime: String
  summary: String
  trailer: String
  collection: String
  soundMixs: [String]
  productions: [String]
  aspectRatio: String
  theatersDate: String
  streamingDate: String
  originalLanguage: String
}

type FlimWhatToKnow {
  title: String
  content: String
}

input FlimWhatToKnowInput {
  title: String
  content: String
}

type FlimQuote {
  name: String
  content: String
}

input FlimQuoteInput {
  name: String
  content: String
}

type FlimData {
  news: [Post]
  # topReviews: [Post]
  # reviews: [Post]
  alsoLike: [Flim]
  trailerPhoto: String
  RottenTomatoes: FlimTomatometer
}

input FlimDataInput {
  news: [String]
  topReviews: [String]
  reviews: [String]
  alsoLike: [String]
  trailerPhoto: String
  RottenTomatoes: FlimTomatometerInput
}

type FlimTomatometer {
  audienceScore: String
  tomatometerScore: String
}

input FlimTomatometerInput {
  audienceScore: String
  tomatometerScore: String
}

type Flim {
  id: String
  type: String
  info: FlimInfo
  whatToKnows: [FlimWhatToKnow]
  streamings: [String]
  photos: [String]
  crews: [FlimCrew]
  quotes: [FlimQuote]
  data: FlimData
  # lemonScore: String
  # userScore: String
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
}

input FlimInput {
  id: String
  type: String
  info: FlimInfoInput
  whatToKnows: [FlimWhatToKnowInput]
  streamings: [String]
  photos: [String]
  crews: [FlimCrewInput]
  quotes: [FlimQuoteInput]
  data: FlimDataInput
}

type PersonData {
  bestRated: [Flim]
  highestRated: Flim
  lowestRated: Flim
  relativeNews: [Post]
}

input PersonDataInput {
  bestRated: [String]
  highestRated: String
  lowestRated: String
  relativeNews: [String]
}

type Person {
  id: String
  name: String
  birth: Date
  bornIn: String
  summary: String
  images: [String]
  slug: String
  # data: PersonData
  createdAt: DateTime
  updatedAt: DateTime
}

input PersonInput {
  id: String
  name: String
  birth: Date
  bornIn: String
  summary: String
  images: [String]
  data: PersonDataInput
}

input PostDataInput {
  flim: String
  score: Int
}

type PostData {
  flim: Flim
  score: Int
}

input PostInteractInput {
  user: String
  interact: String
}

type PostInteract {
  user: User
  interact: String
}

type Post {
  id: String
  type: String
  uid: String
  content: String
  data: PostData
  tags: [String]
  interacts: [PostInteract]
  section: String
  previewPoster: String
  date: String
  status: Boolean
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PostInput {
  id: String
  type: String
  uid: String
  content: String
  data: PostDataInput
  tags: [String]
  interacts: [PostInteractInput]
  section: String
  previewPoster: String
  date: String
  status: Boolean
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
}

# type Top {
#   id: String
#   type: String
#   year: String
#   data: JSON
#   createdAt: DateTime
#   updatedAt: DateTime
# }

# input TopInput {
#   type: String
#   year: String
#   data: JSON
# }

type Query {
  users: [User]
  user(id: String): User
  comments: [Comment]
  comment(id: String): Comment
  flims: [Flim]
  flim(id: String): Flim
  persons: [Person]
  person(id: String): Person
  posts: [Post]
  post(id: String): Post
  # tops: [Top]
  # top(id: String): Top
}

type Mutation {
  createUser(input: UserInput): User
  updateUser(id: String, input: UserInput): User
  deleteUser(id: String): Boolean
  createComment(input: CommentInput): Comment
  updateComment(id: String, input: CommentInput): Comment
  deleteComment(id: String): Boolean
  createFlim(input: FlimInput): Flim
  updateFlim(id: String, input: FlimInput): Flim
  deleteFlim(id: String): Boolean
  createPerson(input: PersonInput): Person
  updatePerson(id: String, input: PersonInput): Person
  deletePerson(id: String): Boolean
  createPost(input: PostInput): Post
  updatePost(id: String, input: PostInput): Post
  deletePost(id: String): Boolean
  # createTop(input: TopInput): Top
  # updateTop(id: String, input: TopInput): Top
  # deleteTop(id: String): Boolean
}

schema {
  query: Query
  mutation: Mutation
}
