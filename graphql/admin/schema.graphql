scalar Date
scalar Time
scalar DateTime
scalar Duration
scalar UtcOffset
scalar LocalDate
scalar LocalTime
scalar LocalEndTime
scalar EmailAddress
scalar NegativeFloat
scalar NegativeInt
scalar NonEmptyString
scalar NonNegativeFloat
scalar NonNegativeInt
scalar NonPositiveFloat
scalar NonPositiveInt
scalar PhoneNumber
scalar PositiveFloat
scalar PositiveInt
scalar PostalCode
scalar UnsignedFloat
scalar UnsignedInt
scalar URL
scalar ObjectID
scalar BigInt
scalar Long
scalar SafeInt
scalar UUID
scalar GUID
scalar HexColorCode
scalar HSL
scalar HSLA
scalar IPv4
scalar IPv6
scalar ISBN
scalar JWT
scalar Latitude
scalar Longitude
scalar MAC
scalar Port
scalar RGB
scalar RGBA
scalar USCurrency
scalar Currency
scalar JSON
scalar JSONObject
scalar Byte
scalar Void

type User {
  id: String
  email: String
  password: String
  name: String
  image: String
  loginData: String
  status: Boolean
  role: String
  elo: JSON
  otp: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserInput {
  email: String
  password: String
  name: String
  image: String
  token: String
}

type Comment {
  id: String
  parent: String
  parentType: String
  uid: String
  interact: String
  content: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CommentInput {
  parent: String
  parentType: String
  uid: String
  interact: String
  content: String
}

type Flim {
  id: String
  summary: String
  rating: String
  images: [String]
  genres: [String]
  onScreen: DateTime
  lemonScore: Int
  userScore: Int
  status: Boolean
  hot: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input FlimInput {
  summary: String
  rating: String
  images: [String]
  genres: [String]
  onScreen: DateTime
  status: Boolean
  hot: Boolean
}

type Person {
  id: String
  name: String
  birth: Date
  bornIn: String
  summary: String
  images: [String]
  createdAt: DateTime
  updatedAt: DateTime
}

input PersonInput {
  name: String
  birth: Date
  bornIn: String
  summary: String
  images: [String]
}

type Post {
  id: String
  uid: String
  content: String
  contentHtml: String
  tags: [String]
  score: Int
  interact: String
  category: String
  status: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input PostInput {
  content: String
  contentHtml: String
  tags: [String]
  score: Int
  interact: String
  category: String
  status: Boolean
}

type Top {
  id: String
  type: String
  year: String
  data: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input TopInput {
  type: String
  year: String
  data: JSON
}

type Query {
  users: [User]
  user(id: String): User
  comments: [Comment]
  comment(id: String): Comment
  flims: [Flim]
  flim(id: String): Flim
  persons: [Person]
  person(id: String): Person
  posts: [Post]
  post(id: String): Post
  tops: [Top]
  top(id: String): Top
}

type Mutation {
  createUser(input: UserInput): User
  updateUser(id: String, input: UserInput): User
  deleteUser(id: String): Boolean
  createComment(input: CommentInput): Comment
  updateComment(id: String, input: CommentInput): Comment
  deleteComment(id: String): Boolean
  createFlim(input: FlimInput): Flim
  updateFlim(id: String, input: FlimInput): Flim
  deleteFlim(id: String): Boolean
  createPerson(input: PersonInput): Person
  updatePerson(id: String, input: PersonInput): Person
  deletePerson(id: String): Boolean
  createPost(input: PostInput): Post
  updatePost(id: String, input: PostInput): Post
  deletePost(id: String): Boolean
  createTop(input: TopInput): Top
  updateTop(id: String, input: TopInput): Top
  deleteTop(id: String): Boolean
}

schema {
  query: Query
  mutation: Mutation
}
