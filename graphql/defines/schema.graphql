scalar Date
scalar Time
scalar DateTime
scalar Duration
scalar UtcOffset
scalar LocalDate
scalar LocalTime
scalar LocalEndTime
scalar EmailAddress
scalar NegativeFloat
scalar NegativeInt
scalar NonEmptyString
scalar NonNegativeFloat
scalar NonNegativeInt
scalar NonPositiveFloat
scalar NonPositiveInt
scalar PhoneNumber
scalar PositiveFloat
scalar PositiveInt
scalar PostalCode
scalar UnsignedFloat
scalar UnsignedInt
scalar URL
scalar ObjectID
scalar BigInt
scalar Long
scalar SafeInt
scalar UUID
scalar GUID
scalar HexColorCode
scalar HSL
scalar HSLA
scalar IPv4
scalar IPv6
scalar ISBN
scalar JWT
scalar Latitude
scalar Longitude
scalar MAC
scalar Port
scalar RGB
scalar RGBA
scalar USCurrency
scalar Currency
scalar JSON
scalar JSONObject
scalar Byte
scalar Void

type User {
  id: String
  email: String
  password: String
  name: String
  image: String
  status: Boolean
  role: String
  data: UserData
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
}

type UserReport {
  fromUser: User
  type: String
  targetType: String
  targetId: String
  content: String
  status: String
}

type UserData {
  elo: String
  reports: [UserReport]
  working: String
  activeAt: DateTime
}

input UserInput {
  email: String
  password: String
  name: String
  image: String
  status: Boolean
  role: String
  data: UserDataInput
}

input UserDataInput {
  reports: [UserReportInput]
}

input UserReportInput {
  fromUser: String
  targetType: String
  type: String
  tartgetId: String
  content: String
  status: String
}
#----------------------------------------------------------------------------------------------------------------------------------

type Action {
  id: String
  type: String
  parentType: String
  parent: JSON
  user: User
  data: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ActionInput {
  type: String
  parentType: String
  parent: String
  uid: String
  data: String
}

# ----------------------------------------------------------------------------------------------------------------------------------

# type FlimCrew {
#   role: String
#   person: Person
# }

# input FlimCrewInput {
#   role: String
#   person: String
# }

# type FlimInfo {
#   name: String
#   tags: [String]
#   genres: [String]
#   poster: String
#   rating: String
#   runtime: String
#   summary: String
#   trailer: String
#   collection: String
#   soundMixs: [String]
#   productions: [String]
#   aspectRatio: String
#   theatersDate: String
#   streamingDate: String
#   originalLanguage: String
# }

# input FlimInfoInput {
#   name: String
#   tags: [String]
#   genres: [String]
#   poster: String
#   rating: String
#   runtime: String
#   summary: String
#   trailer: String
#   collection: String
#   soundMixs: [String]
#   productions: [String]
#   aspectRatio: String
#   theatersDate: String
#   streamingDate: String
#   originalLanguage: String
# }

# type FlimWhatToKnow {
#   title: String
#   content: String
# }

# input FlimWhatToKnowInput {
#   title: String
#   content: String
# }

# type FlimQuote {
#   name: String
#   content: String
# }

# input FlimQuoteInput {
#   name: String
#   content: String
# }

# type FlimData {
#   news: [Post]
#   topReviews: [Post]
#   reviews: [Post]
#   alsoLike: [Flim]
#   trailerPhoto: String
#   RottenTomatoes: FlimTomatometer
# }

# input FlimDataInput {
#   news: [String]
#   topReviews: [String]
#   reviews: [String]
#   alsoLike: [String]
#   trailerPhoto: String
#   RottenTomatoes: FlimTomatometerInput
# }

# type FlimTomatometer {
#   audienceScore: String
#   tomatometerScore: String
# }

# input FlimTomatometerInput {
#   audienceScore: String
#   tomatometerScore: String
# }

# type Flim {
#   id: String
#   type: String
#   info: FlimInfo
#   whatToKnows: [FlimWhatToKnow]
#   streamings: [String]
#   photos: [String]
#   crews: [FlimCrew]
#   quotes: [FlimQuote]
#   data: FlimData
#   slug: String
#   createdAt: DateTime
#   updatedAt: DateTime
# }

# input FlimInput {
#   type: String
#   info: FlimInfoInput
#   whatToKnows: [FlimWhatToKnowInput]
#   streamings: [String]
#   photos: [String]
#   crews: [FlimCrewInput]
#   quotes: [FlimQuoteInput]
#   data: FlimDataInput
# }

# # ------------------------------------------------------------------------------------------------

type Person {
  id: String
  name: String
  birth: Date
  bornIn: String
  summary: String
  images: [String]
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PersonInput {
  name: String
  birth: Date
  bornIn: String
  summary: String
  images: [String]
}

# # ------------------------------------------------------------------------------------------------

# input PostDataInput {
#   flim: String
#   score: Int
# }

# type PostData {
#   flim: Flim
#   score: Int
# }

# type Post {
#   id: String
#   type: String
#   uid: String
#   title: String
#   content: String
#   data: PostData
#   tags: [String]
#   section: String
#   previewPoster: String
#   status: Boolean
#   slug: String
#   createdAt: DateTime
#   updatedAt: DateTime
# }

# input PostInput {
#   type: String
#   uid: String
#   title: String
#   content: String
#   data: PostDataInput
#   tags: [String]
#   section: String
#   previewPoster: String
#   status: Boolean
#   slug: String
#   createdAt: DateTime
#   updatedAt: DateTime
# }

# ------------------------------------------------------------------------------------------------

type Query {
  users(page: Int, size: Int): [User]
  user(id: String): User
  actions(page: Int, size: Int): [Action]
  action(id: String): Action
  # flims: [Flim]
  # flim(id: String): Flim
  persons(page: Int, size: Int): [Person]
  person(id: String): Person
  # posts: [Post]
  # post(id: String): Post
}

type Mutation {
  createUser(input: UserInput): User
  updateUser(id: String, input: UserInput): User
  deleteUser(id: String): Boolean
  createAction(input: ActionInput): Action
  updateAction(id: String, input: ActionInput): Action
  deleteAction(id: String): Boolean
  # createFlim(input: FlimInput): Flim
  # updateFlim(id: String, input: FlimInput): Flim
  # deleteFlim(id: String): Boolean
  createPerson(input: PersonInput): Person
  updatePerson(id: String, input: PersonInput): Person
  deletePerson(id: String): Boolean
  # createPost(input: PostInput): Post
  # updatePost(id: String, input: PostInput): Post
  # deletePost(id: String): Boolean
}

schema {
  query: Query
  mutation: Mutation
}
